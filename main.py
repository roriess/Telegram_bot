import telebot
from telebot import types
import datetime
import schedule
import time
import threading
import sqlite3

bot = telebot.TeleBot('')

waiting_for_task = {}
waiting_for_delete_task = {}

DATABASE_FILE = 'tasks.db' 

def create_table():
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tasks, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            description TEXT,
            date TEXT,
            completed INTEGER DEFAULT 0
        )
    """)
    conn.commit()
    conn.close()

def save_task(user_id, description, date):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (user_id, description, date) VALUES (?, ?, ?)",
                   (user_id, description, date.strftime('%Y-%m-%d')))
    conn.commit()
    conn.close()

def get_tasks_for_date(user_id, date):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT id, description FROM tasks WHERE user_id = ? AND date = ?",
                   (user_id, date.strftime('%Y-%m-%d'),))
    tasks = cursor.fetchall() 
    conn.close()
    return tasks

def delete_task(task_id):
    """–£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID."""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()

create_table()



@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üóì –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å. –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–æ–≤. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –∏ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    user_id = message.from_user.id

    if message.text == '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É')
        btn2 = types.KeyboardButton('–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
        btn4 = types.KeyboardButton('–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º')
        markup.add(btn1, btn2, btn4)
        bot.send_message(user_id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É':
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
        global waiting_for_task
        waiting_for_task[user_id] = True

    elif user_id in waiting_for_task and waiting_for_task[user_id]:
        task_description = message.text
        waiting_for_task[user_id] = False

        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:')
        bot.register_next_step_handler(message, process_date, task_description)

    elif message.text == '–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        show_tasks_today(message)


@bot.message_handler(func=lambda message: message.text == '–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
def show_tasks_today(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    today = datetime.date.today()
    tasks = get_tasks_for_date(user_id, today)

    if tasks:
        keyboard = []
        message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for task_id, description in tasks:
            message_text += f"- ID: {task_id}, {description}\n"
            keyboard.append([types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {description}", callback_data=f"delete_{task_id}")])

        reply_markup = types.InlineKeyboardMarkup(keyboard)
        bot.send_message(user_id, message_text, reply_markup=reply_markup) 
    else:
        bot.send_message(user_id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def callback_query(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"."""
    task_id = call.data.split('_')[1]
    delete_task(task_id)
    bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!") 

    show_tasks_today(call.message)

def send_daily_reminder():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö."""
    now = datetime.date.today()
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT user_id FROM tasks WHERE date = ?", (now.strftime('%Y-%m-%d'),)) 
    user_ids = [row[0] for row in cursor.fetchall()]

    for user_id in user_ids:
        tasks = get_tasks_for_date(user_id, now)
        if tasks:
             task_list = "\n- ".join([f"ID: {task_id}, {description}" for task_id, description in tasks])
             message = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n- {task_list}"
             bot.send_message(user_id, message)

def schedule_daily_reminder():
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ 6 —É—Ç—Ä–∞."""
    schedule.every().day.at("06:00").do(send_daily_reminder)
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == '__main__':
    create_table()
    threading.Thread(target=schedule_daily_reminder, daemon=True).start()
    bot.polling(none_stop=True, interval=0)
