import telebot

from telebot import types
from config import BOT_TOKEN
from database import save_task, get_tasks_for_date, delete_task
import datetime

bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    '''Handler of the /start command'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    markup.add(btn1)
    bot.send_message(message.chat.id,
'''–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –∏—Ö, –∏ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –Ω–∏—Ö!

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" 

‚ùóÔ∏è–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –æ –Ω–∏—Ö –º–æ–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ'. –°–ø–∞—Å–∏–±–æ!'''
                    , reply_markup=markup)
    

@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')
def handle_mis_posibilidades(message):
    '''Handler of the "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" command'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É')
    btn2 = types.KeyboardButton('üóì –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    btn3 = types.KeyboardButton('üóì –ó–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É')
    btn4 = types.KeyboardButton('‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, 
'''–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?

üìå "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É": –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è.
üìå "–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è": –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.
üìå "–ó–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É": –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å.
üìå "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º": –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –∏ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.'''
                    , reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É')
def ask_for_task_description(message):
    '''Handler of the "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É" command'''
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
    bot.register_next_step_handler(message, ask_for_task_date)  


def ask_for_task_date(message):
    '''Ask for task date'''
    task_description = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:')
    bot.register_next_step_handler(message, process_task_date, task_description)


def process_task_date(message, task_description):
    '''Process the entered date and save the task'''
    try:
        task_date = datetime.datetime.strptime(message.text, '%Y-%m-%d').date()
        user_id = message.chat.id
        save_task(user_id, task_description, task_date)
        bot.send_message(user_id, f'–ó–∞–¥–∞—á–∞ "{task_description}" –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {task_date.strftime("%Y-%m-%d")}')
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î.")


@bot.message_handler(func=lambda message: message.text == 'üóì –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
def show_tasks_today(message):
    '''Show today's tasks with delete buttons'''
    user_id = message.chat.id
    today = datetime.date.today()
    tasks = get_tasks_for_date(user_id, today)

    if tasks:
        message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        keyboard = []
        for task_id, description in tasks:
            message_text += f"- {description} (ID: {task_id})\n"
            keyboard.append([types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {description}", callback_data=f"delete_{task_id}")])

        reply_markup = types.InlineKeyboardMarkup(keyboard)
        bot.send_message(user_id, message_text, reply_markup=reply_markup)
    else:
        bot.send_message(user_id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç. –ú–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å :)")


@bot.message_handler(func=lambda message: message.text == 'üóì –ó–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É')
def ask_for_tasks_date(message):
    '''Ask for tasks date'''
    global task_description
    task_description = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:')
    bot.register_next_step_handler(message, show_tasks)

def show_tasks(message):
    '''Show tasks with delete buttons'''
    global task_description
    user_id = message.chat.id
    try:
        tasks_date = datetime.datetime.strptime(message.text, '%Y-%m-%d').date()
    except ValueError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    tasks = get_tasks_for_date(user_id, tasks_date)

    if tasks:
        message_text = f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏ (–û–ø–∏—Å–∞–Ω–∏–µ: {task_description}):\n"
        keyboard = []
        for task_id, description in tasks:
            message_text += f"- {description} (ID: {task_id})\n"
            keyboard.append([types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {description}", callback_data=f"delete_{task_id}")])

        reply_markup = types.InlineKeyboardMarkup(keyboard)
        bot.send_message(user_id, message_text, reply_markup=reply_markup)
    else:
        bot.send_message(user_id, "–ó–∞–¥–∞—á –Ω–µ—Ç. –ú–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å :)")


@bot.message_handler(func=lambda message: message.text == '‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º')
def handle_mis_posibilidades(message):
    '''Handler of the "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º" command'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É')
    btn2 = types.KeyboardButton('üóì –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    btn4 = types.KeyboardButton('‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º')
    markup.add(btn1, btn2, btn4)
    bot.send_message(message.chat.id, 
'''‚ú® –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º: ‚ú®

1Ô∏è‚É£  /start - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
2Ô∏è‚É£  –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º - –í—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
3Ô∏è‚É£  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
4Ô∏è‚É£  –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.'''
                    , reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_callback(call):
    '''Handler of the "–£–¥–∞–ª–∏—Ç—å" command''' 
    try:
        task_id = int(call.data.split('_')[1])
        delete_task(task_id)
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.",
                              reply_markup=None)
    except ValueError:
        bot.answer_callback_query(call.id, "ID –∑–∞–¥–∞—á–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")